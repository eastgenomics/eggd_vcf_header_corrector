#!/bin/bash
# vcf_header_corrector 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of mutect2_input: '$mutect2_input'"
    echo "Value of cgppindel_input: '$cgppindel_input'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    dx download "$mutect2_input" -o mutect2_input

    dx download "$cgppindel_input" -o cgppindel_input

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    # add tags required for openCGA
	# write these to separate filtered but unannotated VCFs for uploading
	mark-section "Adding SAMPLE tags to VCF headers"
	sample_id=$(echo $mutect2_input | cut -d'-' -f1)  # the id to add to the vcfs

	# add sample id to mutect2 vcf on line before ##tumour_sample in header
	# no SAMPLE line already present so create one from full name and ID we want
	mutect2_column_name=$(grep "#CHROM" "$splitfile" | cut -f10)
	sample_field="##SAMPLE=<ID=${mutect2_column_name},SampleName=${sample_id}>"

	zgrep "^#" "$splitfile" | sed s"/^##tumor_sample/${sample_field}\n&/" > mutect2.header
	bcftools reheader -h mutect2.header "$splitfile" > "${mutect2_vcf_prefix}.opencga.vcf"

	# sense check in logs it looks correct
	zgrep "^#" "${mutect2_vcf_prefix}.opencga.vcf"

	# modify SampleName for tumour sample line to correctly link to our sample ID
	tumour_sample=$(grep "##SAMPLE=<ID=TUMOUR" "$cgppindel_input")
	header_line=$(sed s"/SampleName=[A-Za-z0-9\_\-]*/SampleName=${sample_id}/" <<< $tumour_sample)

	zgrep "^#" "$cgppindel_input" \
		| sed s"/^##SAMPLE=<ID=TUMOUR.*/${header_line}/" > pindel.header

	bcftools reheader -h pindel.header "$cgppindel_input" > "${pindel_vcf_prefix}.opencga.vcf"

	# sense check in logs it looks correct
	zgrep '^#' "${pindel_vcf_prefix}.opencga.vcf"


    mutect2_output=$(dx upload mutect2_output --brief)
    cgppindel_output=$(dx upload cgppindel_output --brief)

    # todo ensure this outputs correctly

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.
    dx-jobutil-add-output mutect2_output "$mutect2_output" --class=file
    dx-jobutil-add-output cgppindel_output "$cgppindel_output" --class=file
}
